schemaVersion: '0.3'
description: |-
  # GF-UpdateDataSources

  ## What does this runbook do?

  Generate and update Grafana data sources configuration file

  ## Input Parameters

  - **AssumeRole**: (Required) IAM Role that runbook will assume to perform AWS call on your behalf
  - **InstanceIds**: (Required) List of EC2 instances that runbook will be applied
  - **RepositoryUrl**: (Required) HTTP URL of the repository. Including OAuth token in the URL. E.g. https://oauth-key@github.com/username/repo.git
  - **Env**: (Required) Which environment that runbook will be applied to. E.g. nonprod, prod

assumeRole: '{{ AssumeRole }}'
parameters:
  AssumeRole:
    type: String
    description: (Required) IAM Role that runbook will assume to perform AWS call on your behalf
  InstanceIds:
    type: 'List<AWS::EC2::Instance::Id>'
    description: (Required) List of EC2 instances that runbook will be applied
  RepositoryUrl:
    type: String
    description: (Required) HTTP URL of the repository. Including OAuth token in the URL. E.g. https://username:personal-access-token@github.com/username/repo.git
  Env:
    type: String
    description: Which environment that runbook will be applied to. E.g. nonprod, prod
mainSteps:
- name: PullConfiguration
  action: 'aws:runCommand'
  inputs:
    DocumentName: GH-CloneRepository
    InstanceIds:
    - '{{ InstanceIds }}'
    Parameters:
      RepositoryUrl: ' {{ RepositoryUrl }}'
  timeoutSeconds: 120

- name: GetSecrets
  action: 'aws:executeScript'
  description: Run a **Python script** to get scecret from secret manager
  inputs:
    Runtime: python3.8
    Handler: script_handler
    InputPayload:
      secretType: grafana-datasource
      env: '{{ Env }}'
    Script: |
      from copy import deepcopy
      import json
      from typing import Dict, List
      import boto3


      sm = boto3.session.Session().client(
          service_name='secretsmanager'
      )


      def script_handler(events, context):
          secret_type = events['secretType']
          env = events['env']

          res = sm.list_secrets(Filters=[
              {'Key': 'tag-key', 'Values': ['env']},
              {'Key': 'tag-value', 'Values': [env]},
              {'Key': 'tag-key', 'Values': ['secret-type']},
              {'Key': 'tag-value', 'Values': [secret_type]},
          ])

          secret_data = {}
          for secret in res['SecretList']:
              merge_dicts(secret_data, get_secret(secret['Name']), no_copy=True)

          return {'secret': json.dumps(secret_data)}


      def get_secret(secret_name: str) -> dict:
          team, datasource_name = secret_name.split('/')[-2:]
          res = sm.get_secret_value(
              SecretId=secret_name
          )
          secret = json.loads(res['SecretString'])
          return {team: {datasource_name: secret}}


      def merge_dicts(*from_dicts: List[Dict], no_copy: bool = False) -> Dict:
          """ no recursion deep merge of 2 dicts

          By default creates fresh Dict and merges all to it.

          no_copy = True, will merge all dicts to a fist one in a list without copy.
          Why? Sometime I need to combine one dictionary from "layers".
          The "layers" are not in use and dropped immediately after merging.
          """

          if no_copy:
              def xerox(x): return x
          else:
              xerox = deepcopy

          result = xerox(from_dicts[0])

          for _from in from_dicts[1:]:
              merge_queue = [(result, _from)]
              for _to, _from in merge_queue:
                  for k, v in _from.items():
                      if k in _to and isinstance(_to[k], dict) and isinstance(v, dict):
                          # key collision add both are dicts.
                          # add to merging queue
                          merge_queue.append((_to[k], v))
                          continue
                      _to[k] = xerox(v)

          return result
  outputs:
  - Name: secret
    Selector: $.Payload.secret
    Type: String
  timeoutSeconds: 600

- name: GenerateDataSources
  action: 'aws:runCommand'
  inputs:
    DocumentName: AWS-RunShellScript
    InstanceIds:
    - '{{ InstanceIds }}'
    Parameters:
      commands:
      - python3 /opt/grafana-ops/scripts/generate-datasource.py /opt/grafana-ops/datasources '{{ GetSecrets.secret }}' /var/lib/grafana/provisioning/datasources
  timeoutSeconds: 600
